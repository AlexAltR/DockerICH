# Команды для работы с одноступенчатым и многоступечатым Dockerfile

docker buildx build -t myapp:multistage -f Dockerfile.multistage .

1. docker buildx build:
docker — это основная команда для работы с Docker.

buildx — это расширенная версия команды docker build, которая использует функциональность BuildKit. BuildKit — это более мощный и производительный движок сборки, который поддерживает такие возможности, как многоплатформенная сборка, кэширование и параллельные сборки.

build — это команда, которая используется для создания Docker-образов на основе Dockerfile.

Таким образом, docker buildx build указывает на использование расширенной команды сборки с использованием BuildKit.

2. -t myapp:multistage:
-t — это флаг для тегирования образа, то есть присвоения ему имени.

myapp:multistage — это тег, который задает имя и версию образа. В данном случае:

myapp — это имя образа.

multistage — это тег, который может использоваться для обозначения конкретной версии образа. Например, ты можешь позже создать разные теги для различных версий (например, myapp:1.0, myapp:latest).

Тегирование образов помогает проще управлять версиями и идентифицировать их.

3. -f Dockerfile.multistage:
-f — это флаг, который указывает, какой файл Dockerfile нужно использовать для сборки образа.

Dockerfile.multistage — это имя файла Dockerfile. В данном случае это файл, в котором содержится описание многоступенчатой сборки. Этот флаг позволяет указать файл Dockerfile с нестандартным именем. Если бы ты не указал бы этот флаг, Docker по умолчанию искал бы файл с именем Dockerfile.

4. . (точка):
Точка в конце команды указывает на контекст сборки — то есть на директорию, где Docker будет искать все файлы, которые нужны для сборки образа.

Точка означает текущую директорию, из которой будет использоваться контекст для сборки образа. Все файлы, упомянутые в Dockerfile (например, COPY . .), будут копироваться из этой директории.




docker run -p 3000:3000 --name server_multi myapp:multistage      

docker run:

Это основная команда для запуска контейнера из уже созданного образа.

Команда docker run позволяет создать и запустить новый контейнер из образа, который ты указал (в данном случае это myapp:multistage).

-p 3000:3000:

Это параметр для проброса портов. Он связывает порт на хосте (первое число) с портом внутри контейнера (второе число).

В данном случае:

3000:3000 означает, что порт 3000 на хост-машине будет проброшен на порт 3000 внутри контейнера.

Это нужно, чтобы приложение, которое работает внутри контейнера, было доступно на порту 3000 на хосте (например, ты можешь подключиться к приложению через http://localhost:3000).

Если бы ты использовал, например, -p 8080:3000, то порт контейнера (3000) был бы проброшен на порт хоста 8080. То есть, доступ к приложению был бы через http://localhost:8080.

--name server_multi:

Этот параметр задает имя контейнера. В данном случае контейнер будет называться server_multi.

Это имя позволяет удобно ссылаться на контейнер в последующих командах, например, при остановке контейнера с помощью команды:

bash
Копировать
docker stop server_multi
Без этого параметра Docker автоматически присвоил бы случайное имя контейнеру.

myapp:multistage:

Это имя и тег образа, из которого будет запущен контейнер.

В данном случае myapp — это имя образа, а multistage — тег образа.

Docker будет искать образ с таким именем и тегом в локальной системе или в реестре Docker (если образ не найден локально, Docker попытается загрузить его из реестра, например, Docker Hub).